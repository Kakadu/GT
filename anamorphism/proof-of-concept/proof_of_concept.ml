(* user code *)
type 'a lst =
  | Nil
  | Cons of 'a * 'a lst

(* autogenerated code *)
let lst_ana step seed =
  let rec lst_unfold s =
    match (step s) with
    | `Nil -> (Nil, s)
    | `Cons (head, tail_seed) ->
        let (tail, after_tail) = lst_unfold tail_seed in
        (Cons(head, tail), after_tail)
  in
  fst (lst_unfold seed)

(* user code *)
let custom_lst_ana = lst_ana (function 0 -> `Nil | n -> `Cons (n, n - 1))

let lst_test () =
  let actual =  custom_lst_ana 3 in
  let expected = Cons (3, Cons (2, Cons (1, Nil))) in
  Printf.printf "%b\n" (actual = expected)



(* user code *)
type 'a bst =
  | Null
  | Node of 'a * 'a bst * 'a bst

(* autogenerated code *)
let bst_ana step seed =
  let rec bst_unfold s =
    match (step s) with
    | `Null -> (Null, s)
    | `Node (root, left, right) ->
        let (left_bst, after_left) = bst_unfold left in
        let (right_bst, after_right) = bst_unfold (right after_left) in
        (Node (root, left_bst, right_bst), after_right)

  in
  fst (bst_unfold seed)

(* user code *)
let bst_step = function
  | ([], _) -> `Null
  | (x :: xs, max) ->
      if x > max then `Null
                 else `Node (x, (xs, x), fun (tail, _) -> (tail, max))

let custom_bst_ana preorder = bst_ana bst_step (preorder, max_int)

let bst_test () =
  let actual =  custom_bst_ana [5; 3; 4; 7; 6; 8] in
  let expected = Node (5, Node (3, Null, Node (4, Null, Null)),
                          Node (7, Node (6, Null, Null), Node (8, Null, Null)))
  in
  Printf.printf "%b\n" (actual = expected)

let () =
  lst_test ();
  bst_test ()
